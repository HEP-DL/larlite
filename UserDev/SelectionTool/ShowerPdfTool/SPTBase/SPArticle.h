/**
 * \file SPArticle.h
 *
 * \ingroup SPAlgo
 * 
 * \brief Class def header for a class SPArticle
 *
 * @author kazuhiro
 */

/** \addtogroup SPAlgo

    @{*/
#ifndef SELECTIONTOOL_SPARTICLE_H
#define SELECTIONTOOL_SPARTICLE_H

#include <iostream>
#include <TObject.h>
#include "SPTEnv.h"
#include "GeoAlgo/GeoVector.h"

namespace sptool {
  /**
     \class SPArticle
     @brief Tree-structured data holder to represent a reconstructed particle
     sptool::SPArticle is meant to represent a reconstructed particle with a hierarchy       \n
     structure (tree data structure). Each sptool::SPArticle has PDG code which represents   \n
     a specific particle type. Additional parameters include vtx, momentum, energy, daughter \n
     particle list, and a likelihood score. The likelihood score determines how likely this  \n
     representation is correct. The daughter particle list is a set of sptool::SPArticle that\n
     is generated by the subject particle.
  */
  class SPArticle : public TObject {
    
  public:
    
    /// Default constructor
    SPArticle();
    
    /// Default destructor
    virtual ~SPArticle(){}

    /// Initializer
    void Init();

    //
    // Getters
    //
    int pdg_code()                   const { return _pdg_code; }
    const ::geoalgo::Point_t&  pos() const { return _pos;      }
    const ::geoalgo::Vector_t& mom() const { return _mom;      }
    double energy()                  const { return _energy;   }
    const std::vector<sptool::SPArticle>& daughters() { return _daughters; }

    //
    // Setters
    //
    void pdg_code(const int id)              { _pdg_code = id; }
    void pos(const ::geoalgo::Point_t& pos)  { _pos.compat(pos); _pos = pos; }
    void pos(const double& x,
	     const double& y,
	     const double& z)
    { _pos[0]=x; _pos[1]=y; _pos[2]=z; }
    void mom(const ::geoalgo::Vector_t& mom) { _mom.compat(mom); _mom = mom; } 
    void mom(const double& px,
	     const double& py,
	     const double& pz)
    { _mom[0]=px; _mom[1]=py; _mom[2]=pz; }
    void energy(const double energy) { _energy = energy; }
    void daughters( const std::vector<sptool::SPArticle>& daughters )
    { _daughters = daughters; }
    void append(const SPArticle& s) { _daughters.push_back(s); }

  protected:

    int _pdg_code;            ///< PDG code
    ::geoalgo::Point_t _pos;  ///< Position [cm]
    ::geoalgo::Vector_t _mom; ///< Momentum [MeV/c]
    double _energy;           ///< Energy [MeV]
    double _score;            ///< Likelihood

    std::vector<sptool::SPArticle> _daughters; ///< List of daughters
    
    ClassDef(SPArticle,1)

  };

  /*
    \class SPArticleSet
    @brief a collection of sptool::SPArticle which has no mother
    sptool::SPArticleSet is a simple collection of sptool::SPArticle that has  \n
    no mother (i.e. the root of particle history tree). 
   */
  class SPArticleSet : public TObject,
		       public std::vector<sptool::SPArticle> {
		       
  public:

    SPArticleSet(){}

    virtual ~SPArticleSet(){}

  };
  
}

#endif
/** @} */ // end of doxygen group 

